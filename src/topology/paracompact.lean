/-
Copyright (c) 2021 Yury Kudryashov. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Reid Barton, Yury Kudryashov
-/
import topology.subset_properties
import topology.separation
import topology.metric_space.emetric_space
import set_theory.ordinal

/-!
# Paracompact topological spaces

-/

open set filter function
open_locale filter topological_space ennreal

universes u v

/-- A topological space is called paracompact, if every open covering of this space admits
a locally finite refinement. -/
class paracompact_space (X : Type u) [topological_space X] : Prop :=
(locally_finite_refinement :
  ‚àÄ (S : set (set X)) (ho : ‚àÄ s ‚àà S, is_open s) (hc : ‚ãÉ‚ÇÄ S = univ),
  ‚àÉ (Œ± : Type u) (t : Œ± ‚Üí set X) (ho : ‚àÄ a, is_open (t a)) (hc : (‚ãÉ a, t a) = univ),
    locally_finite t ‚àß ‚àÄ a, ‚àÉ s ‚àà S, t a ‚äÜ s)

variables {Œπ X : Type*} [topological_space X]

/-- Any open cover of a paracompact space has a locally finite *precise* refinement, that is,
 one indexed on the same type with each open set contained in the corresponding original one. -/
lemma paracompact_space.precise_refinement [paracompact_space X] (u : Œπ ‚Üí set X)
  (uo : ‚àÄ a, is_open (u a)) (uc : (‚ãÉ i, u i) = univ) :
  ‚àÉ v : Œπ ‚Üí set X, (‚àÄ a, is_open (v a)) ‚àß (‚ãÉ i, v i) = univ ‚àß locally_finite v ‚àß (‚àÄ a, v a ‚äÜ u a) :=
begin
  have := paracompact_space.locally_finite_refinement (range u) (forall_range_iff.2 uo) uc,
  simp_rw [exists_range_iff, exists_prop, Union_eq_univ_iff] at this,
  choose Œ± t hto hXt htf ind hind, choose t_inv ht_inv using hXt, choose U hxU hU using htf,
  refine ‚ü®Œª i, ‚ãÉ (a : Œ±) (ha : ind a = i), t a, _, _, _, _‚ü©,
  { exact Œª a, is_open_Union (Œª a, is_open_Union $ Œª ha, hto a) },
  { simp only [eq_univ_iff_forall, mem_Union],
    exact Œª x, ‚ü®ind (t_inv x), _, rfl, ht_inv _‚ü© },
  { refine Œª x, ‚ü®U x, hxU x, ((hU x).image ind).subset _‚ü©,
    simp only [subset_def, mem_Union, mem_set_of_eq, set.nonempty, mem_inter_eq],
    rintro i ‚ü®y, ‚ü®a, rfl, hya‚ü©, hyU‚ü©,
    exact mem_image_of_mem _ ‚ü®y, hya, hyU‚ü© },
  { simp only [subset_def, mem_Union],
    rintro i x ‚ü®a, rfl, hxa‚ü©,
    exact hind _ hxa }
end

instance paracompact_of_compact [compact_space X] : paracompact_space X :=
begin
  refine ‚ü®Œª S hSo hSu, _‚ü©,
  rw sUnion_eq_Union at hSu,
  rcases compact_univ.elim_finite_subcover _ (Œª s : S, hSo s.1 s.2)  hSu.ge with ‚ü®T, hT‚ü©,
  simp only [subset_def, mem_Union, mem_univ, forall_prop_of_true] at hT, choose s hsT hs using hT,
  refine ‚ü®(T : set S), Œª t, t.1.1, Œª t, hSo _ t.1.2,
    univ_subset_iff.1 $ Œª x hx, mem_Union.2 ‚ü®‚ü®s x, hsT x‚ü©, hs x‚ü©, locally_finite_of_fintype _,
    Œª t, ‚ü®t.1.1, t.1.2, subset.refl _‚ü©‚ü©
end

instance paracompact_of_locally_compact_sigma_compact [locally_compact_space X]
  [sigma_compact_space X] [t2_space X] : paracompact_space X :=
begin
  classical,
  refine ‚ü®Œª S hSo hSc, _‚ü©,
  -- For technical reasons we prepend two empty sets to the sequence `compact_covering X`
  set K : ‚Ñï ‚Üí set X := Œª n, nat.cases_on n ‚àÖ (Œª n, nat.cases_on n ‚àÖ (compact_covering X)),
  -- Now we restate properties of `compact_covering X` for `K`
  have hKc : ‚àÄ n, is_compact (K n),
  { rintro (_|_|n); simp [K, is_compact_compact_covering] },
  have hKsub : ‚àÄ n, K n ‚äÜ interior (K (n + 1)),
  { rintro (_|_|n); simp [K, compact_covering_subset_interior, nat.lt_succ_self] },
  have hKsub' : ‚àÄ n, K n ‚â§ K (n + 1),
    from Œª n, subset.trans (hKsub n) interior_subset,
  have hKcov : ‚àÄ x, ‚àÉ n, x ‚àà K (n + 2) \ K (n + 1),
  { intro x,
    have := Union_eq_univ_iff.1 (Union_compact_covering X) x,
    rcases nat.find_x this with ‚ü®n, hn, hlt‚ü©,
    refine ‚ü®n, hn, _‚ü©,
    rcases n with (_|n),
    exacts [not_mem_empty _, hlt _ n.lt_succ_self] },
  -- Next we choose a finite covering `T n` of each `K (n + 2) \ interior (K (n + 1))`
  have : ‚àÄ n, ‚àÉ T ‚äÜ S, finite T ‚àß K (n + 2) \ interior (K (n + 1)) ‚äÜ ‚ãÉ‚ÇÄ T,
  { intro n,
    simp only [sUnion_eq_bUnion],
    apply (compact_diff (hKc (n + 2)) is_open_interior).elim_finite_subcover_image,
    { exact Œª s hs, hSo s hs },
    { rw [‚Üê sUnion_eq_bUnion, hSc],
      exact subset_univ _ } },
  choose T hTS hTf hTK, haveI := Œª n, (hTf n).fintype,
  -- Finally, we take the set of all `t \ K n`, `t ‚àà T n`
  refine ‚ü®Œ£ n, T n, Œª a, a.2 \ K a.1, _, _, _, _‚ü©,
  { rintro ‚ü®n, t‚ü©,
    exact is_open_diff (hSo _ (hTS n t.2)) (hKc _).is_closed },
  { refine Union_eq_univ_iff.2 (Œª x, _),
    rcases hKcov x with ‚ü®n, hn‚ü©,
    rcases hTK n (diff_subset_diff_right interior_subset hn) with ‚ü®t, ht, hxt‚ü©,
    exact ‚ü®‚ü®n, t, ht‚ü©, hxt, Œª hx, hn.2 (hKsub' _ hx)‚ü© },
  { intro x,
    rcases hKcov x with ‚ü®n, hn‚ü©,
    refine ‚ü®interior (K (n + 3)), mem_nhds_sets is_open_interior (hKsub (n + 2) hn.1), _‚ü©,
    have : (‚ãÉ k ‚â§ n + 2, (range $ sigma.mk k) : set (Œ£ n, T n)).finite,
      from (finite_le_nat _).bUnion (Œª k hk, finite_range _),
    apply this.subset, rintro ‚ü®k, t, ht‚ü©,
    simp only [mem_Union, mem_set_of_eq, mem_image_eq, subtype.coe_mk],
    rintro ‚ü®x, ‚ü®hxt, hxk‚ü©, hxn‚ü©,
    refine ‚ü®k, _, ‚ü®t, ht‚ü©, rfl‚ü©,
    contrapose! hxk with hnk,
    exact monotone_of_monotone_nat hKsub' hnk (interior_subset hxn) },
  { rintro ‚ü®n, t, ht‚ü©,
    exact ‚ü®t, hTS n ht, diff_subset _ _‚ü© }
end

open emetric
lemma paracompact_of_emetric {X : Type*} [emetric_space X] : paracompact_space X :=
begin
  have pow_pos : ‚àÄ k : ‚Ñï, (0 : ‚Ñù‚â•0‚àû) < 2‚Åª¬π ^ k,
    from Œª k, ennreal.pow_pos (ennreal.inv_pos.2 ennreal.two_ne_top) _,
  have hpow_le : ‚àÄ {m n : ‚Ñï}, m ‚â§ n ‚Üí (2‚Åª¬π : ‚Ñù‚â•0‚àû) ^ n ‚â§ 2‚Åª¬π ^ m,
    from Œª m n h, ennreal.pow_le_pow_of_le_one (ennreal.inv_le_one.2 ennreal.one_lt_two.le) h,
  have h2pow : ‚àÄ n : ‚Ñï, 2 * (2‚Åª¬π : ‚Ñù‚â•0‚àû) ^ (n + 1) = 2‚Åª¬π ^ n,
    by { intro n, simp [pow_succ, ‚Üê mul_assoc, ennreal.mul_inv_cancel] },
  refine ‚ü®Œª S hSo hScov, _‚ü©,
  simp only [sUnion_eq_univ_iff, set_coe.exists'] at hScov,
  set r : S ‚Üí S ‚Üí Prop := well_ordering_rel,
  have wf : well_founded r := is_well_order.wf,
  set ind : X ‚Üí S := Œª x, wf.min {s : S | x ‚àà (s : set X)} (hScov x),
  have mem_ind : ‚àÄ x, x ‚àà (ind x : set X), from Œª x, wf.min_mem _ (hScov x),
  have rel_ind : ‚àÄ {x s}, r s (ind x) ‚Üí x ‚àâ (s : set X),
    from Œª x s hr hxs, wf.not_lt_min _ (hScov x) hxs hr,
  set D : ‚Ñï ‚Üí S ‚Üí set X :=
    Œª n, nat.strong_rec_on' n (Œª n D' s,
      ‚ãÉ (x : X) (hxs : ind x = s) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ (s : set X))
        (hlt : ‚àÄ (m < n) (s : S), x ‚àâ D' m ‚Äπ_‚Ä∫ s), ball x (2‚Åª¬π ^ n)),
  have Dn : ‚àÄ n s, D n s = ‚ãÉ (x : X) (hxs : ind x = s) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ (s : set X))
    (hlt : ‚àÄ (m < n) (s : S), x ‚àâ D m s), ball x (2‚Åª¬π ^ n),
    from Œª n s, by { simp only [D], rw nat.strong_rec_on_beta' },
  have memD : ‚àÄ {n s y}, y ‚àà D n s ‚Üî ‚àÉ x (hxs : ind x = s) (hb : ball x (3 * 2‚Åª¬π ^ n) ‚äÜ (s : set X))
    (hlt : ‚àÄ (m < n) (s : S), x ‚àâ D m s), edist y x < 2‚Åª¬π ^ n,
  { intros n s y, rw [Dn n s], simp only [mem_Union, mem_ball] },
  have Dcov : ‚àÄ x, ‚àÉ (s : S) (n : ‚Ñï), x ‚àà D n s,
  { intro x,
    obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, ball x (3 * 2‚Åª¬π ^ n) ‚äÜ (ind x : set X),
    { rcases is_open_iff.1 (hSo (ind x) (ind x).2) x (mem_ind x) with ‚ü®Œµ, Œµ0, hŒµ‚ü©,
      have : 0 < Œµ / 3 := ennreal.div_pos_iff.2 ‚ü®Œµ0.lt.ne', ennreal.coe_ne_top‚ü©,
      rcases ennreal.exists_inv_two_pow_lt this.ne' with ‚ü®n, hn‚ü©,
      refine ‚ü®n, subset.trans (ball_subset_ball _) hŒµ‚ü©,
      simpa only [div_eq_mul_inv, mul_comm] using (ennreal.mul_lt_of_lt_div hn).le },
    by_contra h, push_neg at h,
    apply h (ind x) n,
    exact memD.2 ‚ü®x, rfl, hn, Œª _ _ _, h _ _, mem_ball_self (pow_pos _)‚ü© },
  have Dopen : ‚àÄ n s, is_open (D n s),
  { intros n s,
    rw Dn,
    iterate 4 { refine is_open_Union (Œª _, _) },
    exact is_open_ball },
  have HDS : ‚àÄ n s, D n s ‚äÜ s,
  { intros n s x,
    rw memD,
    rintro ‚ü®y, rfl, hsub, -, hyx‚ü©,
    refine hsub (lt_of_lt_of_le hyx _),
    calc 2‚Åª¬π ^ n = 1 * 2‚Åª¬π ^ n : (one_mul _).symm
    ... ‚â§ 3 * 2‚Åª¬π ^ n : ennreal.mul_le_mul _ le_rfl,
    -- TODO: use `norm_num`
    have : ((1 : ‚Ñï) : ‚Ñù‚â•0‚àû) ‚â§ (3 : ‚Ñï), from ennreal.coe_nat_le_coe_nat.2 (by norm_num1),
    exact_mod_cast this },
  refine ‚ü®‚Ñï √ó S, Œª ns, D ns.1 ns.2, _, _, _, _‚ü©,
  { exact Œª _, Dopen _ _ },
  { refine Union_eq_univ_iff.2 (Œª x, _),
    rcases Dcov x with ‚ü®s, n, h‚ü©,
    exact ‚ü®‚ü®n, s‚ü©, h‚ü© },
  { intro x,
    set s := wf.min {s | ‚àÉ n, x ‚àà D n s} (Dcov x),
    rcases wf.min_mem _ (Dcov x) with ‚ü®n, hn : x ‚àà D n s‚ü©,
    have hs : ‚àÄ s' n', x ‚àà D n' s' ‚Üí ¬¨r s' s,
    { intros s' n' h, exact wf.not_lt_min _ (Dcov x) ‚ü®n', h‚ü© },
    have : D n s ‚àà ùìù x, from mem_nhds_sets (Dopen _ _) hn,
    rcases (nhds_basis_uniformity uniformity_basis_edist_inv_two_pow).mem_iff.1 this
      with ‚ü®k, -, hsub : ball x (2‚Åª¬π ^ k) ‚äÜ D n s‚ü©,
    set B := ball x (2‚Åª¬π ^ (n + k + 1)),
    refine ‚ü®B, ball_mem_nhds _ (pow_pos _), _‚ü©,
    have Hgt : ‚àÄ (i ‚â• n + k + 1) (s : S), disjoint (D i s) B,
    { rintros i hi s y ‚ü®hyi, hyx‚ü©,
      rcases memD.1 hyi with ‚ü®z, rfl, hzi, H, hz‚ü©,
      have : z ‚àâ ball x (2‚Åª¬π ^ k), from Œª hz, H n (by linarith) s (hsub hz), apply this,
      calc edist z x ‚â§ edist y z + edist y x : edist_triangle_left _ _ _
      ... < (2‚Åª¬π ^ i) + (2‚Åª¬π ^ (n + k + 1)) : ennreal.add_lt_add hz hyx
      ... ‚â§ (2‚Åª¬π ^ (k + 1)) + (2‚Åª¬π ^ (k + 1)) :
        add_le_add (hpow_le $ by linarith) (hpow_le $ by linarith)
      ... = (2‚Åª¬π ^ k) : by rw [‚Üê two_mul, h2pow] },
    have Hle : ‚àÄ i ‚â§ n + k, set.subsingleton {s | (D i s ‚à© B).nonempty},
    { rintros i hi s‚ÇÅ ‚ü®y, hyD, hyB‚ü© s‚ÇÇ ‚ü®z, hzD, hzB‚ü©,
      apply @eq_of_incomp _ r, rw [‚Üê not_or_distrib], intro h,
      wlog h : r s‚ÇÅ s‚ÇÇ := h using [s‚ÇÅ s‚ÇÇ y z, s‚ÇÇ s‚ÇÅ z y],
      rcases memD.1 hyD with ‚ü®y', rfl, hsuby, -, hdisty‚ü©,
      rcases memD.1 hzD with ‚ü®z', rfl, -, -, hdistz‚ü©,
      suffices : edist z' y' < 3 * 2‚Åª¬π ^ i, from rel_ind h (hsuby this),
      calc edist z' y' ‚â§ edist z' x + edist x y' : edist_triangle _ _ _
      ... ‚â§ (edist z z' + edist z x) + (edist y x + edist y y') :
        add_le_add (edist_triangle_left _ _ _) (edist_triangle_left _ _ _)
      ... < (2‚Åª¬π ^ i + 2‚Åª¬π ^ (n + k + 1)) + (2‚Åª¬π ^ (n + k + 1) + 2‚Åª¬π ^ i) :
        by apply_rules [ennreal.add_lt_add]
      ... = 2 * (2‚Åª¬π ^ i + 2‚Åª¬π ^ (n + k + 1)) : by simp only [two_mul, add_comm]
      ... ‚â§ 2 * (2‚Åª¬π ^ i + 2‚Åª¬π ^ (i + 1)) :
        ennreal.mul_le_mul le_rfl $ add_le_add le_rfl $ hpow_le (add_le_add hi le_rfl)
      ... = 3 * 2‚Åª¬π ^ i : _,
      rw [mul_add, h2pow, bit1, add_mul, one_mul] },
    have : (‚ãÉ (i ‚â§ n + k) (s ‚àà {s : S | (D i s ‚à© B).nonempty}), {(i, s)}).finite,
      from (finite_le_nat _).bUnion (Œª i hi, (Hle i hi).finite.bUnion (Œª _ _, finite_singleton _)),
    refine this.subset (Œª I hI, _), simp only [mem_Union],
    refine ‚ü®I.1, _, I.2, hI, prod.mk.eta.symm‚ü©,
    refine not_lt.1 (Œª hlt, Hgt I.1 hlt I.2 hI.some_spec) },
  { rintro ‚ü®n, s‚ü©,
    exact ‚ü®s, s.2, HDS _ _‚ü© }
end
/-
See Mary Ellen Rudin, A new proof that metric spaces are paracompact.
https://www.ams.org/journals/proc/1969-020-02/S0002-9939-1969-0236876-3/S0002-9939-1969-0236876-3.pdf
-/
